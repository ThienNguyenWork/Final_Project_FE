//! Ki·ªÉm tra ƒëƒÉng nh·∫≠p & ph√¢n quy·ªÅn

const user = JSON.parse(localStorage.getItem("user"));

if (!user) {
    window.location.href = "login.html";
} else {
    document.getElementById("user-greeting").innerText = `Xin ch√†o, ${user.username}`;

    document.getElementById("login-link").classList.add("hidden");
    document.getElementById("logout-btn").classList.remove("hidden");

    // Ki·ªÉm tra role v√† c·∫≠p nh·∫≠t giao di·ªán t∆∞∆°ng ·ª©ng
    if (user.role === "admin" || user.role === "artist") {
        document.getElementById("admin-panel").classList.remove("hidden");
        document.getElementById("popular").classList.add("hidden");
    } else {
        document.getElementById("admin-panel").classList.add("hidden");
        document.getElementById("popular").classList.remove("hidden");
    }
}

// Load & Render danh s√°ch s·∫£n ph·∫©m
let allProducts = JSON.parse(localStorage.getItem("products")) || [];

async function loadProducts() {
    try {
        // L·∫•y s·∫£n ph·∫©m ƒë√£ l∆∞u tr·ªØ
        let storedProducts = JSON.parse(localStorage.getItem("products")) || [];

        // Fetch s·∫£n ph·∫©m t·ª´ JSON
        const response = await fetch('products.json');
        const { Popular } = await response.json();

        // Merge d·ªØ li·ªáu, ∆∞u ti√™n d·ªØ li·ªáu m·ªõi nh·∫•t
        let mergedProducts = [...storedProducts];

        Popular.forEach(popularProduct => {
            const existingProduct = mergedProducts.find(stored => stored.nameProduct === popularProduct.nameProduct);
            if (!existingProduct) {
                mergedProducts.push(popularProduct);
            } else {
                // C·∫≠p nh·∫≠t th√¥ng tin thi·∫øu
                Object.assign(existingProduct, popularProduct);
            }
        });

        // C·∫≠p nh·∫≠t localStorage v√† bi·∫øn allProducts
        localStorage.setItem("products", JSON.stringify(mergedProducts));
        allProducts = mergedProducts;

        // Render d·ª±a v√†o role - s·ª≠a ƒë·ªÉ h·ªó tr·ª£ c·∫£ admin v√† artist
        if (user.role === "admin" || user.role === "artist") {
            renderAdminProducts();
        } else {
            const container = document.getElementById("popular");
            renderPopular(container, allProducts);
        }

        console.log("T·ªïng s·ªë s·∫£n ph·∫©m ƒë√£ t·∫£i:", mergedProducts.length);
    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
    }
}

// Render danh s√°ch b√†i h√°t
function renderPopular(container, products) {
    container.innerHTML = products.map((song, index) => `
        <div onclick="navigateToDetail(${index})" class="bg-gray-900 p-4 ml-5 rounded-xl shadow-lg hover:bg-[#1a1d29] transition cursor-pointer">
            <div class="lg:grid grid-cols-12 items-center gap-4">
                <span class="text-white font-bold text-xl">#${index + 1}</span>
                <div class="col-span-3 flex items-center gap-4">
                    <img class="w-14 h-14 rounded-lg object-cover" src="${song.imageLink}" alt="${song.nameProduct}" />
                    <div>
                        <h2 class="text-base text-white font-semibold">${song.nameProduct}</h2>
                        <p class="text-xs text-gray-400">${song.nameArtist}</p>
                    </div>
                </div>
                <div class="col-span-3 hidden lg:block">
                    <p class="text-sm text-gray-400">${song.album}</p>
                </div>
                <div class="col-span-2 hidden lg:block">
                    <p class="text-sm text-gray-400">${song.releaseDate}</p>
                </div>
                <div class="col-span-2 hidden lg:block">
                    <p class="text-sm text-gray-400">${song.time}</p>
                </div>
                
            </div>
        </div>
    `).join('');
}


// Chuy·ªÉn ƒë·∫øn trang chi ti·∫øt
function navigateToDetail(index) {
    window.location.href = `detail.html?id=${index}`;
}





function renderAdminProducts() {
    const productTable = document.getElementById("product-table");
    productTable.innerHTML = allProducts.map((product, index) => `
        <tr class="bg-gray-800 text-white">
            <td class="p-2 w-16 text-center">${index + 1}</td>
           <td class="p-2 w-24 text-center">
    <div class="flex justify-center">
        <img src="${product.imageLink}" alt="H√¨nh ·∫£nh" width="50" height="50" class="rounded-lg">
    </div>
</td>
            <td class="p-2 w-32 break-words">${product.nameProduct}</td>
            <td class="p-2 w-32 break-words">${product.nameArtist}</td>
            <td class="p-2 w-32 text-center">${product.releaseDate || 'N/A'}</td>
            <td class="p-2 w-48">${product.album || 'N/A'}</td>
            <td class="p-2 w-24 text-center">${product.time || 'N/A'}</td>
            <td>
                <button onclick="editProduct(${index})" class="bg-yellow-500 text-white px-4 py-2 rounded-lg">S·ª≠a</button>
                <button onclick="deleteProduct(${index})" class="bg-red-500 text-white px-4 py-2 rounded-lg">X√≥a</button>
            </td>
        </tr>
    `).join('');
}

function saveProduct() {
    try {
        const id = document.getElementById("edit-id").value;
        const rank = document.getElementById("product-rank").value;
        const imageLink = document.getElementById("product-image").value;
        const nameProduct = document.getElementById("product-name").value;
        const nameArtist = document.getElementById("product-artist").value;
        const releaseDate = document.getElementById("product-date").value;
        const album = document.getElementById("product-albums").value;
        const time = document.getElementById("product-time").value;

        if (!rank || !imageLink || !nameProduct || !nameArtist || !releaseDate || !album || !time) {
            alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }

        const product = { nameProduct, rank, imageLink, nameArtist, releaseDate, album, time };

        console.log("Saving product:", product);

        if (id) {
            allProducts[id] = product;
        } else {
            allProducts.push(product);
        }
       
        localStorage.setItem("products", JSON.stringify(allProducts));
        renderAdminProducts();
        renderPopular(document.getElementById("popular"), allProducts);
        clearForm();
    } catch (error) {
        console.error("Error saving product:", error);
        alert("C√≥ l·ªói x·∫£y ra khi l∆∞u s·∫£n ph·∫©m!");
    }
}
function clearForm() {
    document.getElementById("edit-id").value = "";
    document.getElementById("product-rank").value = "";
    document.getElementById("product-image").value = "";
    document.getElementById("product-name").value = "";
    document.getElementById("product-artist").value = "";
    document.getElementById("product-date").value = "";
    document.getElementById("product-albums").value = "";
    document.getElementById("product-time").value = "";
}
function deleteProduct(index) {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) {
        allProducts.splice(index, 1);
        localStorage.setItem("products", JSON.stringify(allProducts));
        renderAdminProducts();
        renderPopular(document.getElementById("popular"), allProducts);
    }
}

function editProduct(index) {
    const product = allProducts[index];
    document.getElementById("edit-id").value = index;
    document.getElementById("product-rank").value = product.rank || "";
    document.getElementById("product-image").value = product.imageLink || "";
    document.getElementById("product-name").value = product.nameProduct || "";
    document.getElementById("product-artist").value = product.nameArtist || "";
    document.getElementById("product-date").value = product.releaseDate || "";
    document.getElementById("product-albums").value = product.album || "";
    document.getElementById("product-time").value = product.time || "";
}
// üîπ H√†m t√¨m ki·∫øm s·∫£n ph·∫©m
function searchProducts() {
    const searchText = document.getElementById('search-navbar').value.toLowerCase();
    // L·∫•y n·ªôi dung ng∆∞·ªùi d√πng nh·∫≠p v√†o √¥ t√¨m ki·∫øm(search - navbar).
    // Chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng(toLowerCase()) ƒë·ªÉ t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát ch·ªØ hoa / ch·ªØ th∆∞·ªùng.
    // V√≠ d·ª•:
    // Ng∆∞·ªùi d√πng nh·∫≠p: "iphone".
    // N·∫øu s·∫£n ph·∫©m trong danh s√°ch l√† "iPhone 14":
    // "iPhone 14".toLowerCase() ‚Üí "iphone 14".
    // "iphone 14".includes("iphone") ‚Üí K·∫øt qu·∫£ kh·ªõp.

    const filteredProducts = allProducts.filter(product =>
    // Duy·ªát qua to√†n b·ªô danh s√°ch s·∫£n ph·∫©m (allProducts).
    // Gi·ªØ l·∫°i s·∫£n ph·∫©m n√†o c√≥ nameProduct ch·ª©a t·ª´ kh√≥a t√¨m ki·∫øm.
        product.nameProduct.toLowerCase().includes(searchText)
    );
    renderPopular(document.getElementById("popular"), filteredProducts);
    // C·∫≠p nh·∫≠t giao di·ªán, ch·ªâ hi·ªÉn th·ªã s·∫£n ph·∫©m kh·ªõp v·ªõi t·ª´ kh√≥a.
}
// üîπ L·∫Øng nghe s·ª± ki·ªán nh·∫≠p v√†o √¥ t√¨m ki·∫øm
document.getElementById('search-navbar').addEventListener('input', searchProducts);
// M·ªói l·∫ßn ng∆∞·ªùi d√πng nh·∫≠p ch·ªØ v√†o √¥ t√¨m ki·∫øm, h√†m searchProducts() s·∫Ω ƒë∆∞·ª£c g·ªçi.
// T√¨m ki·∫øm & c·∫≠p nh·∫≠t k·∫øt qu·∫£ theo th·ªùi gian th·ª±c.


//ƒêƒÉng xu·∫•t
function logout() {
    localStorage.removeItem("user");
    window.location.href = "/login/";
}


window.onload = loadProducts;